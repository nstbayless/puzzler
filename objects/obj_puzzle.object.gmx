<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PUZ_WIDTH = 5;
PUZ_HEIGHT = 5;
PUZ_TYPE_N = 6;
PUZ_C[T_BROWN] = make_color_rgb(200, 64, 48);
PUZ_C[T_BLUE] = c_blue;
PUZ_C[T_GREEN] = c_green;
PUZ_C[T_YELLOW] = c_yellow;
PUZ_C[T_PURPLE] = c_purple;
PUZ_C[T_ATK] = c_white;

draw_mon_x = room_width/2;
draw_mon_y = room_height/5;

draw_puz_bev = 16;
draw_puz_w = room_width-draw_puz_bev;
draw_puz_h = room_width-draw_puz_bev;

draw_puz_x = draw_puz_bev/2;
draw_puz_y = room_height/2-draw_puz_h/2+64;

interval_x = draw_puz_w/(PUZ_WIDTH)
interval_y = draw_puz_h/(PUZ_HEIGHT)

cur_x = 2;
cur_y = 2;
cur_sel = false;

scr_board_randomize();
scr_board_reset_meta();

ATTACK_ANIM_MAX_T = 25;
SMASH_ANIM_MAX_T = 12;

stat_swap_max = 3;
stat_swaps = stat_swap_max;

mode=1; //1: allow swapping. 2: smash orbs
smash_timer = 0;
g_timer=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>monsters</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a_mon_sprite[0] = spr_mon_whale;
a_mon_hpmax[0] = 1000;
a_mon_defense[0] = 0;
a_mon_name[0] = "Flying Whale"
a_mon_type[0] = T_PURPLE
a_mon_atk[0] = 20;

scr_set_monster(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>party</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a_pc_sprite[0] = spr_NaOH;
a_pc_name[0] = "NaOH"
a_pc_hp[0] = 400;
a_pc_atk[0] = 2;
a_pc_type[0] = T_BLUE;

a_pc_sprite[1] = spr_NaOH;
a_pc_name[1] = "Irish"
a_pc_hp[1] = 300;
a_pc_atk[1] = 6;
a_pc_type[1] = T_YELLOW;

a_pc_sprite[2] = spr_NaOH;
a_pc_name[2] = "Guy no. 3"
a_pc_hp[2] = 500;
a_pc_atk[2] = 3;
a_pc_type[2] = T_BROWN;

a_pc_sprite[3] = spr_NaOH;
a_pc_name[3] = "The Queen"
a_pc_hp[3] = 200;
a_pc_atk[3] = 4;
a_pc_type[3] = T_GREEN;

a_pc_sprite[4] = spr_NaOH;
a_pc_name[4] = "Sassy"
a_pc_hp[4] = 300;
a_pc_atk[4] = 3;
a_pc_type[4] = T_GREEN;

party_pc[0] = 0;
party_pc[1] = 1;
party_pc[2] = 2;
party_pc[3] = 3;

party_size = 4;

scr_setup_party();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode==1) {
    cur_sel = keyboard_check(vk_shift);
    
    if (keyboard_check_pressed(vk_left)) {
        if (cur_x&gt;0) {
            scr_cur_move(cur_x-1,cur_y)
        }
    }
    
    if (keyboard_check_pressed(vk_right)) {
        if (cur_x&lt;PUZ_WIDTH-1) {
            scr_cur_move(cur_x+1,cur_y)
        }
    }
    
    if (keyboard_check_pressed(vk_up)) {
        if (cur_y&gt;0) {
            scr_cur_move(cur_x,cur_y-1)
        }
    }
    
    if (keyboard_check_pressed(vk_down)) {
        if (cur_y&lt;PUZ_HEIGHT-1) {
            scr_cur_move(cur_x,cur_y+1)
        }
    }
    
    if (keyboard_check_pressed(vk_space)) {
        scr_endturn();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode==M_SMASH) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_smash();
    }
}
if (mode==M_CASCADE) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_cascade();
    }
}
if (mode==M_ATK_COMBO) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_attack_begin_animation();
    }
}
if (mode==M_ATK_RISE) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_attack_end();
    }
}
if (mode==M_ATK_HIT) {
    smash_timer --;
    if (smash_timer&lt;0) {
        scr_mon_attack_begin();
    }
}
if (mode==M_MATK) {
    smash_timer--;
    scr_mon_attack_update()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animations

for (i=0;i&lt;party_size;i++) {
    if (draw_pc_damage_timer[i] &gt; 0) {
        t = draw_pc_damage_timer[i];
        draw_pc_damage_timer[i]--;
        draw_pc_damage_scale[i] = (draw_pc_damage_scale[i] - 1)*((t-1)/t) + 1
    } else {
        draw_pc_damage_scale[i] = 1;
    }
}

if (mode == M_SMASH) {
    for (x_=0;x_&lt;PUZ_WIDTH;x_++)
            for (y_=0;y_&lt;PUZ_WIDTH;y_++) {
                if (clear[x_,y_])
                    clear_timer[x_,y_] --;
            }
}

if (mon_hp &lt; mon_hp_residue) {
    mon_hp_residue -= 0.01*(mon_hpmax);
}

g_timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// orbs
for (x_=0;x_&lt;PUZ_WIDTH;x_++) {
    for (y_=0;y_&lt;PUZ_HEIGHT;y_++) {
        cp = 1;
        if (clear[x_,y_]) {
            cp = clear_timer[x_,y_]/SMASH_ANIM_MAX_T;
            cp = 1 - (1-cp)*(1-cp) // acceleration
        }
        if (cp&lt;=0)
            cp = 0;
        type = board[x_,y_]
        col = PUZ_C[type];
        draw_x = (2*x_+1)*interval_x/2 + draw_puz_x;
        draw_y = (2*y_+1)*interval_y/2 + draw_puz_y;
        if (type==mon_type &amp;&amp; !new[x_,y_] &amp;&amp; cp == 1) {
            print(mode);
            if (mode == M_MATK) {
                draw_x += random(1)*4-2;
                draw_y += random(1)*4-2;
            }
            draw_set_colour(make_color_rgb(160,0,0))
            draw_set_alpha(1);
            draw_circle(draw_x-1,draw_y-1,33 + sin(g_timer/7)*1,false)
            draw_set_alpha(1);
            draw_set_colour(c_white);
        }
        if (cp == 1)
            draw_sprite_ext(spr_orb,1,draw_x,draw_y,1,1,0,col,1)
        else {
            draw_set_colour(col);
            draw_circle(draw_x,draw_y,32*cp,false)
        }
    }
}

if (mode==1) {
    // cursor
    draw_x = (2*cur_x+1)*interval_x/2 + draw_puz_x-1;
    draw_y = (2*cur_y+1)*interval_y/2 + draw_puz_y-1;
    
    draw_set_alpha(0.65)
    if (cur_sel)
        draw_set_colour(c_lime);
    else
        draw_set_colour(c_white);
    r_base = 33 + sin(g_timer/7)*2
    for (i=0;i&lt;6;i++) {
        draw_circle(draw_x,draw_y,r_base - i/2,true);
    }
    draw_set_colour(c_black);
    if (i==0 || i==6) {
        draw_circle(draw_x,draw_y,r_base,true);
        draw_circle(draw_x,draw_y,r_base-3.5,true);
    }
}

// draw misc text

draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_font(f_14);

draw_text(room_width-32,room_height-64,stat_swaps);
if (mode==M_SMASH || mode == M_CASCADE) {
    if (combo &gt; 0) {
        draw_text(room_width-128,room_height-64,"COMBO x" + string(combo));
    }
}
if (mode==M_ATK_COMBO) {
    if (combo &gt; 1) {
        draw_set_alpha(1-smash_timer/20)
        scr_draw_fancy_text(room_width/2-smash_timer,room_height-52, "COMBO x" + string(combo), 3)
    }
}

draw_set_alpha(1);
// draw monster

draw_x_offset = 0;
draw_y_offset = 0;
if (mode==6) {
    p = smash_timer/anim_hit_max
    draw_x_offset = random(1)*(p+1)*anim_hit_power/6
    draw_y_offset = random(1)*(p+1)*anim_hit_power/6
}

draw_set_font(f_14);
draw_sprite(mon_sprite,1,draw_mon_x+draw_x_offset,draw_mon_y+draw_y_offset);
draw_text(draw_mon_x,24,mon_name);

// draw monster health bar

draw_healthbar(8,draw_puz_y-32,room_width-8,draw_puz_y-8,100*mon_hp_residue/mon_hpmax,c_black,c_red,c_red,0,true,true);
draw_healthbar(8,draw_puz_y-32,room_width-8,draw_puz_y-8,100*mon_hp/mon_hpmax,c_black,PUZ_C[mon_type],PUZ_C[mon_type],0,false,true);
scr_draw_fancy_text(draw_mon_x,draw_puz_y - 20,string(mon_hp) + " HP",1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>party</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>panel_space = 16;
panel_width = (room_width - panel_space)/party_size;
panel_height = 100;

// party hp bar
draw_healthbar(8,draw_puz_y+draw_puz_h,room_width-8,draw_puz_y+draw_puz_h+24,100*party_hp/party_hpmax,c_black,c_green,c_green,0,true,true)

for (i=0;i&lt;party_size;i++) {
    draw_y = room_height - 24;
    if (mode&gt;=M_SMASH &amp;&amp; mode &lt;= M_ATK_HIT) {
        if (pc_damage[i] &gt; 0)
            draw_y -= 8;
    }
    draw_x = panel_space + panel_width*i;
    draw_set_colour(PUZ_C[pc_type[i]])
    draw_rectangle(draw_x,draw_y,draw_x+panel_width-panel_space,draw_y+panel_height,false)
    portrait_bevel = 4;
    portrait_width = panel_width-panel_space-portrait_bevel*2;
    scale = portrait_width/sprite_get_width(pc_sprite[i]);
    draw_sprite_ext(pc_sprite[i],1,draw_x+portrait_bevel,draw_y+portrait_bevel,scale,scale,0,c_white,1)
    
    // damage text
    if (pc_damage[i]&gt;0) {
        draw_atk_y = draw_y;
        if (mode==5) {
            // attack animation:
            p = smash_timer/ATTACK_ANIM_MAX_T;
            p = 0.5-0.5*cos(p*pi);
            draw_atk_y = draw_y*p + (draw_mon_y+i*20)*(1-p);
        }
        scr_draw_fancy_text(draw_x+panel_width/2-panel_space/2,draw_atk_y-draw_pc_damage_timer[i]/2,string(pc_damage[i]),1.2)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>monster orb shots</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;mon_orb_shots_n;i++) {
    if (mon_orb_shot_enabled[i]) {
        scr_draw_fancy_text(mon_orb_shot_x[i],mon_orb_shot_y[i],mon_orb_shot_power[i],1.3)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

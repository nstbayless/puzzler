<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

PUZ_WIDTH = 5;
PUZ_HEIGHT = 5;
PUZ_TYPE_N = 6;

PUZ_C[T_BROWN] = make_colour_hsv(10,240,160);
S_BROWN = "brown"

PUZ_C[T_BLUE] = c_blue;
PUZ_S[T_BLUE] = "blue";

PUZ_C[T_GREEN] = c_green;
PUZ_S[T_GREEN] = "green";

PUZ_C[T_YELLOW] = make_colour_rgb(255,190,0);
PUZ_S[T_YELLOW] = "yellow"

PUZ_C[T_PURPLE] = make_colour_hsv(200,200,255);
PUZ_S[T_PURPLE] = "lavender"

PUZ_C[T_ATK] = make_colour_rgb(210,210,210);
PUZ_S[T_ATK] = "white"

PARTY_RESOURCE_N = PUZ_TYPE_N-1;

draw_mon_x = room_width/2;
draw_mon_y = room_height/5;

draw_puz_bev = 16;
draw_puz_w = room_width-draw_puz_bev;
draw_puz_h = room_width-draw_puz_bev;

draw_puz_x = draw_puz_bev/2;
draw_puz_y = room_height/2-draw_puz_h/2+64;

draw_hpbar_y = draw_puz_y + draw_puz_h;
draw_hpbar_height = 24;
draw_hpbar_bevel = 8
draw_resource_y = draw_hpbar_y + draw_hpbar_height+8;

draw_mon_hpbar_y = draw_puz_y-32;
draw_mon_card_queue_bottom_y = draw_mon_hpbar_y-2
mon_card_colour = make_colour_rgb(150,60,30);
mon_card_colour_dark = make_colour_rgb(80,40,20);
COL_MINION = make_color_rgb(160,0,0);

interval_x = draw_puz_w/(PUZ_WIDTH)
interval_y = draw_puz_h/(PUZ_HEIGHT)

cur_x = 2;
cur_y = 2;
cur_sel = false;
cur_tray = false;
cur_pc_x = 0;

SMASH_ANIM_MAX_T = 12;
ATTACK_ANIM_MAX_T = 25;
ATTACK_DEF_MAX_T = 30;
ATTACK_DEF_DONE_T = 10;
MSPELL_ANIM_MAX_T = 90;
MSPELL_ANIM_UNFOLD_T = 84;
MSPELL_ANIM_VANISH_T = 25;
CHANGE_TIMER_MAX = 15;
TUT_MESSAGE_ANIM_MAX_T = 15;
CARD_POP_QUEUE_MAX_T = 20;
card_pop_queue_t = 0;
max_party_size = 4;

power_counter_n = 0;
combo = 0;

stat_swap_max = 3;
stat_swaps = stat_swap_max;
suppress_show_power = false;

mode=M_MOVE; //modes defined in macros
smash_timer = 0;
windfall_enabled = false;
g_timer=0;

mon_card_queue_n = 5;

game_mode = GM_BATTLE;
game_message_n = 0;
god_mode = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>monsters</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>M = 0;

a_mon_name[M] = "Tutorial Whale"
a_mon_sprite[M] = spr_mon_whale;
a_mon_scale[M] = 1;
a_mon_hpmax[M] = 300;
a_mon_def[M] = 0;
a_mon_type[M] = T_PURPLE
a_mon_atk[M] = 4;
a_mon_card_scr[M] = scr_mon_tutorial;

M = 1;

a_mon_name[M] = "Classmate"
a_mon_sprite[M] = spr_classmate1
a_mon_hpmax[M] = 100;
a_mon_def[M] = 0;
a_mon_type[M] = T_BROWN;
a_mon_atk[M] = 5;
a_mon_card_scr[M] = scr_mon_classmate;

M = 2;

a_mon_name[M] = "Another Classmate"
a_mon_sprite[M] = spr_classmate1
a_mon_hpmax[M] = 400;
a_mon_def[M] = 0;
a_mon_type[M] = T_YELLOW;
a_mon_atk[M] = 15;
a_mon_card_scr[M] = scr_mon_classmate;

M = 3;

a_mon_name[M] = "Yet Another Classmate"
a_mon_sprite[M] = spr_classmate1
a_mon_hpmax[M] = 700;
a_mon_def[M] = 0;
a_mon_type[M] = T_GREEN;
a_mon_atk[M] = 30;
a_mon_card_scr[M] = scr_mon_classmate;

M = 4;

a_mon_name[M] = "Disgruntled Boardmember"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 80;
a_mon_def[M] = 0;
a_mon_type[M] = T_PURPLE;
a_mon_atk[M] = 4;
a_mon_card_scr[M] = scr_mon_classmate;

M = 5;

a_mon_name[M] = "Very Important Person"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 200;
a_mon_def[M] = 0;
a_mon_type[M] = T_PURPLE;
a_mon_atk[M] = 20;
a_mon_card_scr[M] = scr_mon_classmate;

M = 6;

a_mon_name[M] = "Major Stakeholder"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 300;
a_mon_def[M] = 0;
a_mon_type[M] = T_BROWN;
a_mon_atk[M] = 15;
a_mon_card_scr[M] = scr_mon_classmate;

M = 7;

a_mon_name[M] = "Decrepit Lathe"
a_mon_sprite[M] = spr_lathe;
a_mon_hpmax[M] = 45;
a_mon_def[M] = 0;
a_mon_type[M] = T_GREEN;
a_mon_atk[M] = 10;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 1;
a_mon_extra[M,1] = 3;

M = 8;

a_mon_name[M] = "Rampaging Useless Robot"
a_mon_sprite[M] = spr_lathe;
a_mon_hpmax[M] = 115;
a_mon_def[M] = 0;
a_mon_type[M] = T_YELLOW;
a_mon_atk[M] = 25;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 1;
a_mon_extra[M,1] = 3;

M = 9;

a_mon_name[M] = "H4ck the//Comput3r!!"
a_mon_sprite[M] = spr_compy;
a_mon_hpmax[M] = 230;
a_mon_def[M] = 0;
a_mon_type[M] = T_BLUE;
a_mon_atk[M] = 20;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 2;
a_mon_extra[M,1] = 3;
a_mon_extra[M,2] = 2;

M = 10;

a_mon_name[M] = "Enormous Watermelon"
a_mon_sprite[M] = spr_mon_watermelon;
a_mon_hpmax[M] = 15;
a_mon_def[M] = 50;
a_mon_type[M] = T_GREEN;
a_mon_atk[M] = 7;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 3;
a_mon_extra[M,1] = 0;
a_mon_extra[M,2] = 2;
a_mon_extra[M,3] = 3;

M = 11;

M = 12;

a_mon_name[M] = "Visage of Pulchritude"
a_mon_sprite[M] = spr_mon_visage;
a_mon_hpmax[M] = 60;
a_mon_def[M] = 12;
a_mon_type[M] = T_PURPLE;
a_mon_atk[M] = 4;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 2;
a_mon_extra[M,1] = 0;
a_mon_extra[M,2] = 3;

M = 13;

a_mon_name[M] = "Repugnant Countenance"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 150;
a_mon_def[M] = 0;
a_mon_type[M] = T_BLUE;
a_mon_atk[M] = 12;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 2;
a_mon_extra[M,1] = 1;
a_mon_extra[M,2] = 3;

M = 14;

a_mon_name[M] = "Janitor"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 700;
a_mon_def[M] = 60;
a_mon_type[M] = T_BLUE;
a_mon_atk[M] = 20;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 2;
a_mon_extra[M,1] = 1;
a_mon_extra[M,2] = 3;

M = 16;

a_mon_name[M] = "Grad Student"
a_mon_sprite[M] = spr_classmate1;
a_mon_hpmax[M] = 2300;
a_mon_def[M] = 0;
a_mon_type[M] = T_BROWN;
a_mon_atk[M] = 32;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 2;
a_mon_extra[M,1] = 1;
a_mon_extra[M,2] = 0;

M = 17

a_mon_name[M] = "Dr. Greg Martin"
a_mon_sprite[M] = spr_boardmember1;
a_mon_hpmax[M] = 5700;
a_mon_def[M] = 0;
a_mon_type[M] = T_YELLOW;
a_mon_atk[M] = 50;
a_mon_card_scr[M] = scr_mon_read_extra;
a_mon_extra[M,0] = 3;
a_mon_extra[M,1] = 1;
a_mon_extra[M,2] = 3;
a_mon_extra[M,3] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spell cards</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>C = 0;

a_card_name[C] = "Corrupt"
a_card_warmup[C] = 1;
a_card_script[C] = scr_card_corrupt
a_card_description[C] = "Turns one orb at random into a minion."

C = 1;

a_card_name[C] = "Doze off"
a_card_warmup[C] = 2;
a_card_script[C] = scr_card_doze
a_card_description[C] = "Heals 30 hit points"

C = 2;

a_card_name[C] = "Cheat"
a_card_warmup[C] = 1;
a_card_script[C] = scr_card_cheat
a_card_description[C] = "Steals 3 of each resource."

C = 3;

a_card_name[C] = "Convert"
a_card_warmup[C] = 3;
a_card_script[C] = scr_card_convert
a_card_description[C] = "Turns two orbs at random into minions."
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>powers</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a_power_name[0] = "Shapeshift"
a_power_type[0] = T_BLUE;
a_power_cost[0] = 8;
a_power_description[0] = "All " + PUZ_S[T_YELLOW] + " orbs become blue."
a_power_script[0] = scr_power_shapeshift
a_power_passive[0] = false;

a_power_name[1] = "Windfall"
a_power_type[1] = T_PURPLE
a_power_cost[1] = 12;
a_power_description[1] = "30% of of all new orbs are " + PUZ_S[T_YELLOW] + "."
a_power_script[1] = scr_power_windfall;
a_power_passive[1] = true;

a_power_name[2] = "Divide by Zero"
a_power_type[2] = T_BROWN
a_power_cost[2] = 35;
a_power_description[2] = "Clears board and deals 50% of enemy HP in damage."
a_power_script[2] = scr_power_divide
a_power_passive[2] = false;

a_power_name[3] = "Gossip"
a_power_type[3] = T_GREEN
a_power_cost[3] = 12;
a_power_description[3] = "Did you hear..? Yellow is the new purple! ## Lavender orbs all become " + PUZ_S[T_YELLOW] + ". ## If Sassy is nearby, she gains the power to summon watermelons."
a_power_script[3] = scr_power_gossip
a_power_passive[3] = false;

a_power_name[4] = "Scan"
a_power_type[4] = T_PURPLE
a_power_cost[4] = 24;
a_power_description[4] = "Enemy defense is permanently halved."
a_power_script[4] = scr_power_scan
a_power_passive[4] = false;

a_power_name[5] = "Snoozing"
a_power_description[5] = "Bryan heals the party 1% HP per turn."
a_power_script[5] = scr_power_snooze
a_power_end_script[5] = scr_power_snooze_cont
a_power_passive[5] = true;

a_power_name[25] = "Summon Watermelon"
a_power_type[25] = T_GREEN
a_power_cost[25] = 3;
a_power_description[25] = "One random orb becomes green."
a_power_script[25] = scr_power_shapeshift
a_power_passive[25] = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>party</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a_pc_sprite[C_NaOH] = spr_NaOH;
a_pc_name[C_NaOH] = "NaOH"
a_pc_hp[C_NaOH] = 400;
a_pc_atk[C_NaOH] = 2;
a_pc_type[C_NaOH] = T_BLUE;
a_pc_power[C_NaOH] = 0;

a_pc_sprite[C_IRISH] = spr_irish;
a_pc_name[C_IRISH] = "Irish"
a_pc_hp[C_IRISH] = 300;
a_pc_atk[C_IRISH] = 6;
a_pc_type[C_IRISH] = T_YELLOW;
a_pc_power[C_IRISH] = 1;

a_pc_sprite[C_GUY3] = spr_guy3;
a_pc_name[C_GUY3] = "Guy \#3"
a_pc_hp[C_GUY3] = 500;
a_pc_atk[C_GUY3] = 3;
a_pc_type[C_GUY3] = T_BROWN;
a_pc_power[C_GUY3] = 2;

a_pc_sprite[C_QUEEN] = spr_queen;
a_pc_name[C_QUEEN] = "The Queen"
a_pc_hp[C_QUEEN] = 200;
a_pc_atk[C_QUEEN] = 4;
a_pc_type[C_QUEEN] = T_PURPLE;
a_pc_power[C_QUEEN] = 3;

a_pc_sprite[C_SASSY] = spr_sassy;
a_pc_name[C_SASSY] = "Sassy"
a_pc_hp[C_SASSY] = 300;
a_pc_atk[C_SASSY] = 3;
a_pc_type[C_SASSY] = T_GREEN;
a_pc_power[C_SASSY] = 4;

a_pc_sprite[C_BRYAN] = spr_bryan;
a_pc_name[C_BRYAN] = "Bryan"
a_pc_hp[C_BRYAN] = 500;
a_pc_atk[C_BRYAN] = 1;
a_pc_type[C_BRYAN] = T_GREEN;
a_pc_power[C_BRYAN] = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>B=0;

a_battle_name[B] = "Tutorial"
a_battle_prq[B] = scr_bat_prq_sat;
a_battle_victory[B] = scr_vic_none;
a_battle_description[B] = "Learn how to play the game"
a_battle_wintext[B] = "Good job. Now the real fight begins!"
a_battle_mon_n[B] = 1;
a_battle_mon[B,0] = 0;

B++;

a_battle_name[B] = "Irish's Lab";
a_battle_prq[B] = scr_bat_prq_char;
a_battle_extra[B,0] = C_NaOH;
a_battle_victory[B] = scr_vic_unlock_first;
a_battle_description[B] = "All this junk lying around is really dangerous. Time to clean up, don't you think?"
a_battle_wintext[B] = "Fantastic! The lab looks clean and new. Now you can finally get started on your math homework."
a_battle_mon_n[B] = 3;
a_battle_mon[B,0] = 7;
a_battle_mon[B,1] = 8;
a_battle_mon[B,2] = 9;

B++;

a_battle_name[B] = "Board Meeting";
a_battle_prq[B] = scr_bat_prq_char;
a_battle_extra[B,0] = C_IRISH;
a_battle_victory[B] = scr_vic_unlock_first;
a_battle_description[B] = "Ugh, the only thing worse than your board of directors' incompetence is their fashion sense."
a_battle_wintext[B] = "Good work whipping those blithering fools into shape. Your hostile takeover is nearly complete. But look at the time, you better get to class!"
a_battle_mon_n[B] = 3;
a_battle_mon[B,0] = 4;
a_battle_mon[B,1] = 5;
a_battle_mon[B,2] = 6;

B++;

a_battle_name[B] = "School Greenhouse"
a_battle_prq[B] = scr_bat_prq_char;
a_battle_extra[B,0] = C_SASSY;
a_battle_victory[B] = scr_vic_unlock_first;
a_battle_description[B] = "Looks like the Queen's been gossiping again. Naturally this means giant watermelons are popping up everywhere. Better smash 'em before you get blamed for it."
a_battle_wintext[B] = "Nicely done! That was one tough melon to crack. As a plus, you now know what you'll be eating during lunch break."
a_battle_mon_n[B] = 1;
a_battle_mon[B,0] = 10;

B++;

a_battle_name[B] = "Beauty Parlour"
a_battle_prq[B] = scr_bat_prq_char;
a_battle_extra[B,0] = C_QUEEN;
a_battle_victory[B] = scr_vic_unlock_first;
a_battle_description[B] = "You're hunting down a beautician who may have supernaturally good fashion sense. Might as well pawn a free manicure off her first."
a_battle_wintext[B] = "Well done! His days of overpriced haircuts are over. Shame about the smashed mirror, though.##With that off your agenda, it's time to meet up with the other agent at school."
a_battle_mon_n[B] = 2;
a_battle_mon[B,0] = 12;
a_battle_mon[B,1] = 13;

B++;

a_battle_name[B] = "Math Class"
a_battle_prq[B] = scr_bat_prq_first_complete;
a_battle_victory[B] = scr_vic_unlock_classroom;
a_battle_description[B] = "It's vitally important for your plans that you pass this course. Unfortunately it is pretty tricky..."
a_battle_wintext[B] = "Nicely done! Now that the competition has been eliminated, you're sure to pass this course with flying colours. Dr. Greg scales on a bell curve, right?"
a_battle_mon_n[B] = 3;
a_battle_mon[B,0] = 1;
a_battle_mon[B,1] = 2;
a_battle_mon[B,2] = 3;

B++;

a_battle_name[B] = "Greg's Lab"
a_battle_prq[B] = scr_bat_prq_prev;
a_battle_victory[B] = scr_vic_unlock_classroom;
a_battle_description[B] = "You have to get to Dr. Greg before the others do!"
a_battle_wintext[B] = "Great job! Unfortunately, that's all of the game programmed so far :("
a_battle_mon_n[B] = 3;
a_battle_mon[B,0] = 14;
a_battle_mon[B,1] = 15;
a_battle_mon[B,2] = 16;

a_battle_n = B+1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alt game mode setup</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gm_csi_char[0] = 0;
gm_csi_char_description[0] = "Shapeshifting Engineer"

gm_csi_char[1] = 1;
gm_csi_char_description[1] = "Affluent Blackbelt"

gm_csi_char[2] = 4;
gm_csi_char_description[2] = "Impulsive Otaku"

gm_csi_char[3] = 3;
gm_csi_char_description[3] = "Gossipping Narcissist"

tutorial_mode = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,state);

for (i=0;i&lt;20;i++)
    state.battle_complete[i] = false;

state.start_char = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>startup</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (START_COND == 0)
    game_mode = GM_CHARSEL_INIT;
if (START_COND == 1) {
    // set up conditions on game load
    
    party_pc[0] = C_IRISH;
    party_pc[1] = C_BRYAN;
    party_pc[2] = 3;
    party_pc[3] = 4;
    god_mode = true;
    party_size = 2;
    state.start_char = party_pc[0];
    a_pc_atk[0] = 3000;
    scr_overworld_begin();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// no input allowed if game message shown (except to dismiss);
no_input = game_message_n &gt; 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>GM_BATTLE</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode==M_MOVE &amp;&amp; !no_input) {
    if (cur_tray) {
        // cursor in pc tray
        if (keyboard_check_pressed(vk_up)) {
            cur_tray = false;
            suppress_show_power = false;
        }
        
        if (keyboard_check_pressed(vk_left)) {
            if (cur_pc_x &gt; 0)
                cur_pc_x --;
            suppress_show_power = false;
        }
        
        if (keyboard_check_pressed(vk_right)) {
            if (cur_pc_x &lt; party_size - 1)
                cur_pc_x ++;
            suppress_show_power = false;
        }
        
        if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(ord('Z'))) {
            // select pc power
            if (power_cost[cur_pc_x] &lt;= party_resource[power_type[cur_pc_x]]) {
                suppress_show_power = true;
                party_resource[power_type[cur_pc_x]] -= power_cost[cur_pc_x];
                script_execute(power_script[cur_pc_x]);
            }
        }
    } else {
        // cursor on board
        cur_sel = keyboard_check(vk_shift);
        
        if (keyboard_check_pressed(vk_left)) {
            if (cur_x&gt;0) {
                scr_cur_move(cur_x-1,cur_y)
            }
        }
        
        if (keyboard_check_pressed(vk_right)) {
            if (cur_x&lt;PUZ_WIDTH-1) {
                scr_cur_move(cur_x+1,cur_y)
            }
        }
        
        if (keyboard_check_pressed(vk_up)) {
            if (cur_y&gt;0) {
                scr_cur_move(cur_x,cur_y-1)
            }
        }
        
        if (keyboard_check_pressed(vk_down)) {
            if (cur_y&lt;PUZ_HEIGHT-1) {
                scr_cur_move(cur_x,cur_y+1)
            } else {
                //if (!swapstuck) //swapstuck turns out to be an annoying feature
                cur_tray = true;
            }
        }
        
        var tutorial_skipban = false;
        if (tutorial_mode &gt; 0 &amp;&amp; tutorial_mode &lt; 6)
            tutorial_skipban = true;
        if (keyboard_check_pressed(vk_space) &amp;&amp;! tutorial_skipban) {
            scr_endturn();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode==M_SMASH) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_smash();
    }
}
if (mode==M_CASCADE) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_cascade();
    }
}
if (mode==M_ATK_COMBO) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_attack_begin_animation();
    }
}
if (mode==M_ATK_RISE) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_attack_def();
    }
}
if (mode==M_ATK_DEF) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_attack_end();
    }
}
if (mode==M_ATK_HIT) {
    smash_timer--;
    if (smash_timer&lt;0) {
        scr_checkdeath();
    }
}
if (mode==M_MATK) {
    smash_timer--;
    scr_mon_attack_update()
}
if (mode==M_MSPELL) {
    smash_timer--;
    scr_mon_spell_update();
}

scr_tutorial_update();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animations

if (game_mode != GM_BATTLE)
    exit;

for (i=0;i&lt;party_size;i++) {
    if (draw_pc_damage_timer[i] &gt; 0) {
        t = draw_pc_damage_timer[i];
        draw_pc_damage_timer[i]--;
        draw_pc_damage_scale[i] = (draw_pc_damage_scale[i] - 1)*((t-1)/t) + 1
    } else {
        draw_pc_damage_scale[i] = 1;
    }
}

if (mode == M_SMASH) {
    for (x_=0;x_&lt;PUZ_WIDTH;x_++)
            for (y_=0;y_&lt;PUZ_WIDTH;y_++) {
                if (clear[x_,y_])
                    clear_timer[x_,y_] --;
            }
}

for (x_ = 0;x_ &lt; PUZ_WIDTH; x_++) {
    for (y_ = 0;y_ &lt; PUZ_WIDTH; y_++) {
        if (change_timer[x_,y_] &gt; 0)
            change_timer[x_,y_] --;
    }
}

if (mon_hp &lt; mon_hp_residue) {
    mon_hp_residue -= 0.01*(mon_hpmax);
}

g_timer++;
if (card_pop_queue_t &gt; 0)
    card_pop_queue_t --;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (game_mode==GM_CHARSEL_INIT &amp;&amp;! no_input) {
    if (keyboard_check_pressed(vk_left)) {
        if (cur_pc_x &gt; 0)
            cur_pc_x--;
    }
    if (keyboard_check_pressed(vk_right)) {
        if (cur_pc_x &lt; 3)
            cur_pc_x++;
    }
    if (scr_input_select()) {
        game_mode = GM_BATTLE;
        party_size = 1;
        var char_id = gm_csi_char[cur_pc_x]
        state.start_char = char_id;
        party_pc[0] = char_id
        scr_battle_begin(0);
    }
}
else if (game_mode==GM_OVERWORLD &amp;&amp;! no_input) {
    if (keyboard_check_pressed(vk_up)) {
        overworld_sel = min(overworld_sel+1,battle_access_n-1);
    }
    if (keyboard_check_pressed(vk_down)) {
        overworld_sel = max(overworld_sel-1,0);
    }
    if (scr_input_select()) {
        scr_battle_begin(battle_access[overworld_sel])
    }
    var rate = 0.05;
    overworld_scroll_y = overworld_scroll_y*(1-rate)+rate*overworld_sel;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (game_message_n &gt; 0) {
    //dismiss message:
    if (scr_input_select()) {
        scr_pop_message();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>game_mode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>GM_BATTLE</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// orbs
for (x_=0;x_&lt;PUZ_WIDTH;x_++) {
    for (y_=0;y_&lt;PUZ_HEIGHT;y_++) {
        cp = 1;
        if (clear[x_,y_]) {
            cp = clear_timer[x_,y_]/SMASH_ANIM_MAX_T;
            cp = 1 - (1-cp)*(1-cp) // acceleration
        }
        if (cp&lt;=0)
            cp = 0;
        type = board[x_,y_]
        col = PUZ_C[type];
        draw_x = floor((2*x_+1)*interval_x/2 + draw_puz_x);
        draw_y = floor((2*y_+1)*interval_y/2 + draw_puz_y);
        var ct = change_timer[x_,y_]/CHANGE_TIMER_MAX
        if (ct &gt; 0) {
            // magic change animation
            if (!change_minion[x_,y_])
                col = c_white;
            cp = (ct-0.5)*(ct-0.5)*2+0.5;
            if (cp&gt;= 1)
                cp = 0.99;
        }
        var draw_minion_effect = minion[x_,y_] &amp;&amp; cp == 1
        if (draw_minion_effect) {
            if (mode == M_MATK) {
                draw_x += floor(random(1)*4-2);
                draw_y += floor(random(1)*4-2);
            }
            draw_set_colour(COL_MINION)
            draw_set_alpha(1);
            var glow_thickness = 2
            draw_circle(draw_x-1,draw_y-1,32 + (1 + sin(g_timer/7))*glow_thickness,false)
            draw_set_alpha(1);
            draw_set_colour(c_white);
        }
        if (cp == 1) {
            draw_sprite_ext(spr_orb,1,draw_x,draw_y,1,1,0,col,1)
            if (draw_minion_effect) {
                draw_set_colour(c_white)
                //draw_sprite(spr_cracks,1,draw_x,draw_y);
                draw_sprite_ext(spr_glow,1,draw_x,draw_y,1,1,0,COL_MINION,1)
            }
        } else {
            draw_set_colour(col);
            draw_circle(draw_x,draw_y,32*cp,false)
        }
    }
}

if (mode==1) {
    // cursor
    if (cur_tray) {
        // cursor on tray
        // renders stuff in party script 
    } else {
        // cursor on board
        draw_x = (2*cur_x+1)*interval_x/2 + draw_puz_x-1;
        draw_y = (2*cur_y+1)*interval_y/2 + draw_puz_y-1;
        
        draw_set_alpha(0.65)
        if (cur_sel)
            draw_set_colour(c_lime);
        else
            draw_set_colour(c_white);
        r_base = 33 + sin(g_timer/7)*2
        for (i=0;i&lt;6;i++) {
            draw_circle(draw_x,draw_y,r_base - i/2,true);
        }
        draw_set_colour(c_black);
        if (i==0 || i==6) {
            draw_circle(draw_x,draw_y,r_base,true);
            draw_circle(draw_x,draw_y,r_base-3.5,true);
        }
    }
}

// draw misc text

draw_set_colour(c_white);
draw_set_alpha(1);
draw_set_font(f_14);

draw_text(room_width-32,room_height-64,stat_swaps);
if (mode==M_SMASH || mode == M_CASCADE) {
    if (combo &gt; 0) {
        draw_text(room_width-128,room_height-64,"COMBO x" + string(combo));
    }
}
if (mode==M_ATK_COMBO) {
    draw_set_alpha(1-smash_timer/20)
    var combo_str = "";
    if (combo &gt; 1 &amp;&amp; !any_attack)
        combo_str = "No Attack"
    if (combo &gt; 1 &amp;&amp; any_attack)
        combo_str = "COMBO x" + string(combo);
    scr_draw_fancy_text(room_width/2-smash_timer,room_height-52, combo_str, 3)
}


// draw monster
draw_set_alpha(1);

draw_x_offset = 0;
draw_y_offset = 0;
if (mode==M_ATK_HIT) {
    p = smash_timer/anim_hit_max;
    draw_x_offset = random(1)*(p+1)*anim_hit_power/6
    draw_y_offset = random(1)*(p+1)*anim_hit_power/6
}

draw_sprite(mon_sprite,1,draw_mon_x+draw_x_offset,draw_mon_y+draw_y_offset);

draw_set_alpha(1);
// draw monster health bar

draw_healthbar(8,draw_mon_hpbar_y,room_width-8,draw_mon_hpbar_y+24,100*mon_hp_residue/mon_hpmax,c_black,c_red,c_red,0,true,true);
draw_healthbar(8,draw_mon_hpbar_y,room_width-8,draw_mon_hpbar_y+24,100*mon_hp/mon_hpmax,c_black,PUZ_C[mon_type],PUZ_C[mon_type],0,false,true);
scr_draw_fancy_text(draw_mon_x,draw_mon_hpbar_y + 12,string(mon_hp) + " HP",1);

// draw monster stats
if (mon_def &gt; 0) {
    draw_sprite(spr_shield_icon,0,room_width-20,draw_mon_hpbar_y-20);
    scr_draw_fancy_text_ext(room_width-20,draw_mon_hpbar_y-20,f_13,c_white,string(mon_def));
}

// draw card queue
card_height = floor(draw_mon_card_queue_bottom_y/mon_card_queue_n);
card_width = card_height;
for (i = 0; i &lt; mon_card_queue_n; i++) {
    var fall_p = 1-card_pop_queue_t/CARD_POP_QUEUE_MAX_T // card falling animation
    draw_y = card_height*(mon_card_queue_n - i - 2 + fall_p*fall_p);
    c = mon_card_queue[i];
    draw_set_colour(mon_card_colour);
    draw_rectangle(0,draw_y,card_width,draw_y + card_height,false)
    draw_set_colour(mon_card_colour_dark);
    draw_rectangle(0,draw_y,card_width,draw_y + card_height,true)
    scr_draw_fancy_text_ext(f(card_width/2),f(draw_y + card_height/2),f_12,c_red,string_char_at(a_card_name[c],0));
    scr_draw_fancy_text_ext(card_width,draw_y + card_height+3,f_12,c_white,card_warmup[i],fa_right,fa_bottom);
}

if (mode==M_ATK_DEF) {
    // draw shield
    p = smash_timer/ATTACK_DEF_MAX_T
    p = 1-(p-0.5)*(p-.5)*4
    draw_set_alpha(p);
    draw_sprite(spr_shield_large,0,draw_mon_x,draw_mon_y-30);
}

draw_set_alpha(1);

// monster's name
draw_set_font(f_14);
draw_set_halign(fa_center);
draw_set_valign(fa_left);
draw_set_colour(c_white);
draw_text(draw_mon_x,8,mon_name);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>party</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>panel_space = 16;
panel_width = (room_width - panel_space)/max_party_size;
panel_height = 100;

// party hp bar
draw_healthbar(draw_hpbar_bevel,draw_hpbar_y,room_width-draw_hpbar_bevel,draw_hpbar_y+draw_hpbar_height,100*party_hp/party_hpmax,c_black,c_green,c_green,0,true,true)
draw_set_colour(c_white);
scr_draw_fancy_text_ext(room_width/2,draw_hpbar_y+draw_hpbar_height/2,f_14,c_white,string(party_hp) + " HP")

// resources
resource_spacing = room_width*3/5 / (PUZ_TYPE_N - 1);
for (i=0;i&lt;PARTY_RESOURCE_N;i++) {
    draw_x = resource_spacing*i + draw_hpbar_bevel + draw_hpbar_bevel;
    draw_y = draw_resource_y;
    scr_draw_fancy_text_ext(draw_x,draw_y,f_14, PUZ_C[i],party_resource[i]);
}

// party cards
for (i=0;i&lt;party_size;i++) {
    draw_y = room_height - 60;
    if (mode&gt;=M_SMASH &amp;&amp; mode &lt;= M_MATK) {
        if (pc_damage[i] == 0)
            draw_y += 12;
    }
    if (mode == M_MOVE) {
        if (cur_tray &amp;&amp; cur_pc_x == i)
            draw_y -= 16;
        //if (swapstuck) {
        //    draw_y += 12;
        //} //swapstuck no longer exists
    }
    draw_x = panel_space + panel_width*i;
    draw_set_colour(PUZ_C[pc_type[i]])
    if (g_timer % 40 &gt; 30 &amp;&amp; party_resource[power_type[i]] &gt;= power_cost[i] &amp;&amp;!power_passive[i]) {
        draw_set_colour(merge_colour(PUZ_C[power_type[i]],c_white,0.5))
    }
    draw_rectangle(draw_x,draw_y,draw_x+panel_width-panel_space,draw_y+panel_height,false)
    portrait_bevel = 4;
    portrait_width = panel_width-panel_space-portrait_bevel*2;
    scale = portrait_width/sprite_get_width(pc_sprite[i]);
    draw_sprite_ext(pc_sprite[i],1,draw_x+portrait_bevel,draw_y+portrait_bevel,scale,scale,0,c_white,1)
    
    // damage text
    var damage_displayed = pc_damage[i];
    var display_damage = damage_displayed &gt; 0;
    var p = 1;
    if (mode==M_ATK_RISE) {
        // attack animation:
        p = smash_timer/ATTACK_ANIM_MAX_T;
        p = 0.5-0.5*cos(p*pi);
    }
    if (mode==M_ATK_DEF) {
        p=0;
        k = min(1,max(0,1-(smash_timer-ATTACK_DEF_DONE_T)/(ATTACK_DEF_MAX_T-ATTACK_DEF_DONE_T)));
        damage_displayed = f(k*pc_damage[i] + (1-k)*pc_damage_def_tmp[i]);
        if (pc_damage_def_tmp[i] &gt; 0)
            display_damage = true; // display damage even if zero, provided damage was originally &gt;0
    }
    if (mode &lt;= M_ATK_DEF &amp;&amp; display_damage) {
        draw_atk_y = draw_y*p + (draw_mon_y+i*20)*(1-p);
        scr_draw_fancy_text(draw_x+panel_width/2-panel_space/2,draw_atk_y-draw_pc_damage_timer[i]/2,damage_displayed,1.2)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>monster orb shots</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;mon_orb_shots_n;i++) {
    if (mon_orb_shot_enabled[i]) {
        scr_draw_fancy_text(mon_orb_shot_x[i],mon_orb_shot_y[i],mon_orb_shot_power[i],1.3)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>power descriptions</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var des_width = 300;
var des_height = 300;
var box_x = draw_puz_x+draw_puz_w/2;
var box_y = draw_puz_y+draw_puz_h/2;
var description = "";
var box_p = 1;

// draw power description:
var draw_power = cur_tray &amp;&amp;!suppress_show_power;
// draw monster spell card description:
var draw_mspell = (mode == M_MSPELL &amp;&amp; smash_timer &gt; MSPELL_ANIM_VANISH_T)

if (draw_mspell) {
    // unfold
    box_p = min(1,1-(smash_timer - MSPELL_ANIM_UNFOLD_T)/(MSPELL_ANIM_MAX_T - MSPELL_ANIM_UNFOLD_T))
}

if (draw_power || draw_mspell) {
    // draw box:
    draw_set_colour(c_black);
    draw_set_alpha(0.8);
    draw_rectangle(box_x-des_width/2,box_y-des_height/2 * box_p,box_x+des_width/2,box_y+des_height/2 * box_p,false);
}

if (draw_power) {
    // draw pc stats
    var pc = cur_pc_x
    var pow = pc
    var col_atk = merge_color(PUZ_C[pc_type[pc]],c_white,0.2);
    var col_pow = merge_color(PUZ_C[power_type[pow]],c_white,0.2);
    if (power_passive[pow])
        col_pow = c_white;
    scr_draw_fancy_text_ext(box_x,box_y-des_height/2+16,f_16,col_atk,pc_name[pc]);
    scr_draw_fancy_text_ext(box_x,box_y-des_height/2+40,f_13,col_pow,"[" + power_name[pow] + "]")
    var pow_string = "Potato"
    if (!power_passive[pow])
        pow_string = string(party_resource[power_type[pow]])+"/"+string(power_cost[pow]);
    scr_draw_fancy_text_ext(box_x-des_width/2+2,box_y+des_height/2-16,f_13,col_pow,pow_string,fa_left)
    scr_draw_fancy_text_ext(box_x+des_width/2-2,box_y+des_height/2-16,f_13,col_atk,"ATK: " + string(pc_atk[pc]),fa_right)
    
    description = power_description[pow]
    if (power_passive[pow])
        description +="##(Potato abilities are passive effects)"
}

if (draw_mspell &amp;&amp; smash_timer &lt;= MSPELL_ANIM_UNFOLD_T) {
    // draw spell card name, set description
    c = mon_card_queue[0];
    
    scr_draw_fancy_text_ext(box_x,box_y-des_height/2+32,f_18,c_red,a_card_name[c]);
    description = a_card_description[c];
}

if (draw_power || draw_mspell) {
    // draw description:
    
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(f_12);
    draw_text_ext(f(box_x-des_width/2+6),f(box_y-des_height/2+64),description,16,des_width-12)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var panel_width = room_width/4;
var panel_gap = 5;
var card_bevel = 3;

if (game_mode == GM_CHARSEL_INIT) {
    for (i=0;i&lt;4;i++) {
        var char = gm_csi_char[i];
        var spr  = a_pc_sprite[char]
        var col  = PUZ_C[a_pc_type[char]]
        
        var spr_width = panel_width-2*panel_gap-2*card_bevel
        var scale = spr_width/sprite_get_width(spr)
        var panel_height = sprite_get_height(spr)*scale+2*card_bevel
        
        var draw_x = panel_width*i+panel_gap
        var draw_y = room_height/2 - panel_height/2;
        if (cur_pc_x == i)
            draw_y -= 24;
        
        draw_set_colour(col);
        draw_set_alpha(1);
        draw_rectangle(draw_x,draw_y,draw_x+panel_width-2*panel_gap,draw_y+panel_height,false)
        draw_sprite_ext(spr,0,draw_x+card_bevel,draw_y+card_bevel,scale,scale,0,c_white,1);
    }
    
    scr_draw_fancy_text_ext(room_width/2,room_height/4,f_16,c_white,"Select your Character")

    var pc = gm_csi_char[cur_pc_x]
    scr_draw_fancy_text_ext(room_width/2,room_height/4+48,f_30,PUZ_C[a_pc_type[pc]],a_pc_name[pc])
    
    scr_draw_fancy_text_ext(room_width/2,room_height/2+80,f_13,c_gray,gm_csi_char_description[cur_pc_x])
}

if (game_mode == GM_OVERWORLD) {
    var card_width = 200;
    var card_height = 100;
    var card_sep = card_height+20;
    for (i=0;i&lt;battle_access_n;i++) {
        b = battle_access[i];
        var draw_x = room_width/2 - card_width/2;
        var draw_y = room_height/2 - card_sep*(i-overworld_scroll_y) - card_height/2
        var back_col = make_colour_rgb(120,50,20);
        if (i==overworld_sel)
            back_col = make_colour_rgb(70,130,30);
        draw_set_colour(back_col);
        draw_rectangle(draw_x,draw_y,draw_x+card_width,draw_y+card_height,false);
        var text_col = c_white;
        if (!state.battle_complete[b])
            text_col = c_yellow;
        scr_draw_fancy_text_ext(draw_x+card_width/2,draw_y+card_height/2,f_16,text_col,a_battle_name[b])
    }
    scr_draw_fancy_text_ext(room_width/2,40,f_20,c_white,"Select Battle")
    
    // draw description overlay
    
    var bsel = battle_access[overworld_sel];
    var str = a_battle_description[bsel];
    var sep = 17;
    var wbev = 10;
    var wdesc = room_width-2*wbev-10;
    draw_set_font(f_12);
    var desc_height = string_height_ext(str,sep,wdesc)
    draw_set_colour(c_dkgray);
    draw_set_alpha(0.5);
    draw_rectangle(wbev,room_height-desc_height,room_width-wbev,room_height,false);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text_ext(wbev+5,room_height-5,str,sep,wdesc);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tutorial overlay</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (tutorial_mode &gt; 0 &amp;&amp; tut_message!="") {
    var bevel = 30;
    var draw_x1 = bevel;
    var draw_x2 = room_width - bevel;
    draw_set_font(f_10);
    msg_thickness = string_height_ext(tut_message, 16, draw_x2 - draw_x1 - 16)-16;
    
    var p = 1;
    if (tut_message_in_timer &gt; 0)
        p = tut_message_in_timer / TUT_MESSAGE_ANIM_MAX_T
    
    var msg_thickness = 48;
    var draw_y1 = (p-1)*msg_thickness;
    
    draw_set_colour(c_dkgray);
    draw_set_alpha(0.8);
    draw_rectangle(draw_x1,draw_y1,draw_x2,draw_y1+msg_thickness,false);
    
    draw_set_alpha(1);
    draw_set_colour(make_colour_rgb(255,255,128));
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text_ext(room_width/2,f(draw_y1),tut_message,16,draw_x2 - draw_x1 - 16)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message overlay</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// game message overlay
if (game_message_n &gt; 0) {
    var str = game_message[0];
    var msg_sprite = game_message_image[0];
    var do_sprite = msg_sprite!=-1;
    var image_sink = 32;
    if (str!="") {
        var sep = 17;
        var wbev = 0;
        var hbev = 0;
        var wbevi = 8;
        var wdesc = room_width-2*wbev-wbevi*2;
        draw_set_font(f_12);
        draw_set_colour(c_black);
        draw_set_alpha(0.95);
        draw_rectangle(wbev,hbev,room_width-wbev,room_height-hbev,false);
        draw_set_halign(fa_center);
        if (!do_sprite)
            draw_set_valign(fa_middle);
        else
            draw_set_valign(fa_top);
        draw_set_colour(c_white);
        draw_set_alpha(1);
        draw_text_ext(room_width/2,room_height/2 + do_sprite*image_sink,str,sep,wdesc);
        if (do_sprite)
            draw_sprite(msg_sprite,0,room_width/2-sprite_get_width(msg_sprite)/2,room_height/2+image_sink - 10 - sprite_get_height(msg_sprite))
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

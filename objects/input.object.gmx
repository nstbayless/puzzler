<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input_mode = IN_POINT;

pointer_down = false;
pointer_start_x = 0;
pointer_start_y = 0;

delta_x = 0;
delta_y = 0;

_pointer_x_prev = mouse_x;
_pointer_y_prev = mouse_y;

t_since_down = 0;
tap_count = 0;

TAP_WANDER = 16;
DOUBLE_TAP_WANDER = 23;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_anykey))
    input_mode = IN_KEYS;

if (mouse_check_button(mb_left))
    input_mode = IN_POINT;

delta_x = mouse_x-_pointer_x_prev;
delta_y = mouse_y-_pointer_y_prev;
_pointer_x_prev = mouse_x;
_pointer_y_prev = mouse_y;

pointer_pressed = false;
t_since_down++;

if (mouse_check_button_pressed(mb_left)) {
    pointer_pressed = true;
    pointer_down = true;
    pointer_start_x = mouse_x;
    pointer_start_y = mouse_y;
    t_since_down=0;
    delta_x=0;
    delta_y=0;
}

pointer_released = false;
pointer_tap = false;
pointer_double_tap = false;

if (mouse_check_button_released(mb_left)) {
    pointer_down = false;
    pointer_released = true;
    if (t_since_down&lt;=7 &amp;&amp; point_distance(mouse_x,mouse_y,pointer_start_x,pointer_start_y) &lt;= TAP_WANDER) {
        pointer_tap = true;
        tap_count++;
        if (tap_count == 2)
            pointer_double_tap = true;
    }
}

if (t_since_down &gt;= 15)
    tap_count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
